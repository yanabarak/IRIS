{"ast":null,"code":"import axios from 'axios';\nimport moment from 'moment-timezone';\nimport serverConfig from \"../../server.config.json\";\nimport { getAuthUser, hasAuthUser, redirectLogin, removeStorage } from \"./auth\";\n\n/**\n * Create an Axios Client with defaults\n */\nlet axiosInstance = axios.create();\naxiosInstance.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\naxiosInstance.defaults.headers.common['Content-Type'] = 'application/json';\naxiosInstance.defaults.headers.common['Content-Language'] = localStorage.getItem(`${serverConfig.storagePrefix}.settings.locale`) || 'en-US';\nexport const client = axiosInstance;\n\n/**\n * Request Wrapper with default success/error actions\n */\nexport const request = function (options) {\n  if (hasAuthUser() && getAuthUser()) {\n    const user = getAuthUser();\n    axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${user.token}`;\n    axiosInstance.defaults.headers.common['Content-Timezone'] = moment.tz.guess();\n  }\n  const onSuccess = function (response) {\n    return response;\n  };\n  const onError = function (error) {\n    if (error.response) {\n      if (error.response.status === 401) {\n        alert('Your session has expired. Please log in again.');\n        setTimeout(() => {\n          window.location.href = \"/login\";\n          removeStorage('auth');\n        }, 2000);\n        return false;\n      }\n    } else {\n      // Something else happened while setting up the request\n      // triggered the error\n      // console.error('Error Message:', error.message);\n    }\n    return Promise.reject(error.response || error.message);\n  };\n  return axiosInstance(options).then(onSuccess).catch(onError);\n};","map":{"version":3,"names":["axios","moment","serverConfig","getAuthUser","hasAuthUser","redirectLogin","removeStorage","axiosInstance","create","defaults","headers","common","localStorage","getItem","storagePrefix","client","request","options","user","token","tz","guess","onSuccess","response","onError","error","status","alert","setTimeout","window","location","href","Promise","reject","message","then","catch"],"sources":["/home/old/Documents/IRIS_MAN/IRIS_MAN/src/Util/Request.js"],"sourcesContent":["import axios from 'axios';\nimport moment from 'moment-timezone';\nimport serverConfig from \"../../server.config.json\";\nimport { getAuthUser, hasAuthUser, redirectLogin, removeStorage } from \"./auth\";\n\n/**\n * Create an Axios Client with defaults\n */\nlet axiosInstance = axios.create();\n\naxiosInstance.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\naxiosInstance.defaults.headers.common['Content-Type'] = 'application/json';\naxiosInstance.defaults.headers.common['Content-Language'] = localStorage.getItem(`${ serverConfig.storagePrefix }.settings.locale`) || 'en-US';\n\nexport const client = axiosInstance;\n\n/**\n * Request Wrapper with default success/error actions\n */\nexport const request = function (options) {\n\n    if ( hasAuthUser() && getAuthUser() ) {\n        const user = getAuthUser();\n        axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${ user.token }`;\n        axiosInstance.defaults.headers.common['Content-Timezone'] = moment.tz.guess();\n    }\n\n    const onSuccess = function (response) {\n        return response;\n    };\n\n    const onError = function (error) {\n        if ( error.response ) {\n            if ( error.response.status === 401 ) {\n                alert('Your session has expired. Please log in again.');\n                setTimeout(() => {\n                    window.location.href = \"/login\";\n                    removeStorage('auth');\n                }, 2000);\n\n                return false;\n            }\n        } else {\n            // Something else happened while setting up the request\n            // triggered the error\n            // console.error('Error Message:', error.message);\n        }\n\n        return Promise.reject(error.response || error.message);\n    };\n\n    return axiosInstance(options)\n    .then(onSuccess)\n    .catch(onError);\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,YAAY,MAAM,0BAA0B;AACnD,SAASC,WAAW,EAAEC,WAAW,EAAEC,aAAa,EAAEC,aAAa,QAAQ,QAAQ;;AAE/E;AACA;AACA;AACA,IAAIC,aAAa,GAAGP,KAAK,CAACQ,MAAM,CAAC,CAAC;AAElCD,aAAa,CAACE,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,kBAAkB,CAAC,GAAG,gBAAgB;AAC5EJ,aAAa,CAACE,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,cAAc,CAAC,GAAG,kBAAkB;AAC1EJ,aAAa,CAACE,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,kBAAkB,CAAC,GAAGC,YAAY,CAACC,OAAO,CAAC,GAAIX,YAAY,CAACY,aAAa,kBAAmB,CAAC,IAAI,OAAO;AAE9I,OAAO,MAAMC,MAAM,GAAGR,aAAa;;AAEnC;AACA;AACA;AACA,OAAO,MAAMS,OAAO,GAAG,SAAAA,CAAUC,OAAO,EAAE;EAEtC,IAAKb,WAAW,CAAC,CAAC,IAAID,WAAW,CAAC,CAAC,EAAG;IAClC,MAAMe,IAAI,GAAGf,WAAW,CAAC,CAAC;IAC1BI,aAAa,CAACE,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAWO,IAAI,CAACC,KAAK,EAAG;IACjFZ,aAAa,CAACE,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,kBAAkB,CAAC,GAAGV,MAAM,CAACmB,EAAE,CAACC,KAAK,CAAC,CAAC;EACjF;EAEA,MAAMC,SAAS,GAAG,SAAAA,CAAUC,QAAQ,EAAE;IAClC,OAAOA,QAAQ;EACnB,CAAC;EAED,MAAMC,OAAO,GAAG,SAAAA,CAAUC,KAAK,EAAE;IAC7B,IAAKA,KAAK,CAACF,QAAQ,EAAG;MAClB,IAAKE,KAAK,CAACF,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAG;QACjCC,KAAK,CAAC,gDAAgD,CAAC;QACvDC,UAAU,CAAC,MAAM;UACbC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;UAC/BzB,aAAa,CAAC,MAAM,CAAC;QACzB,CAAC,EAAE,IAAI,CAAC;QAER,OAAO,KAAK;MAChB;IACJ,CAAC,MAAM;MACH;MACA;MACA;IAAA;IAGJ,OAAO0B,OAAO,CAACC,MAAM,CAACR,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACS,OAAO,CAAC;EAC1D,CAAC;EAED,OAAO3B,aAAa,CAACU,OAAO,CAAC,CAC5BkB,IAAI,CAACb,SAAS,CAAC,CACfc,KAAK,CAACZ,OAAO,CAAC;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}